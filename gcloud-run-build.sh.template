#!/bin/bash

# Cloud Build Script for StoryCraft
# This script builds the Docker image and pushes it to Google Artifact Registry

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

AUTH_GOOGLE_ID="INPUT YOUR GOOGLE_AUTH_ID"
AUTH_GOOGLE_SECRET="INPUT YOUR GOOGLE SECRET"
NEXTAUTH_SECRET="INPUT YOUR NEXTAUTH_SECRET"

# Default values (can be overridden with environment variables or arguments)
PROJECT_ID="${PROJECT_ID:-$(gcloud config get-value project)}"
LOCATION="${LOCATION:-us-central1}"
REPOSITORY="${REPOSITORY:-storycraft-service}"
IMAGE_NAME="${IMAGE_NAME:-storycraft-service-image}"
SERVICE_NAME="${SERVICE_NAME:-storycraft-service-test}"
SERVICE_ACCOUNT_EMAIL="storycraft-service-account@${PROJECT_ID}.iam.gserviceaccount.com"
PROJECT_NUMBER=$(gcloud projects describe ${PROJECT_ID} --format="value(projectNumber)")




echo ${PROJECT_NUMBER}


# Function to print colored output
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check if gcloud is installed
check_gcloud() {
    if ! command -v gcloud &> /dev/null; then
        print_message "$RED" "Error: gcloud CLI is not installed. Please install it first."
        print_message "$YELLOW" "Visit: https://cloud.google.com/sdk/docs/install"
        exit 1
    fi
}

# Function to check if user is authenticated
check_auth() {
    if ! gcloud auth list --filter=status:ACTIVE --format='value(account)' | grep -q .; then
        print_message "$YELLOW" "You are not authenticated with gcloud. Running authentication..."
        gcloud auth login
    fi
}

# Function to set project
set_project() {
    if [ -z "$PROJECT_ID" ]; then
        print_message "$RED" "Error: PROJECT_ID is not set."
        print_message "$YELLOW" "Please set it using: export PROJECT_ID=your-project-id"
        exit 1
    fi
    
    gcloud config set project "$PROJECT_ID"
    print_message "$GREEN" "Using project: $PROJECT_ID"
}

# Function to enable required APIs
enable_apis() {
    print_message "$YELLOW" "Enabling required APIs..."
    
    gcloud services enable cloudbuild.googleapis.com \
        artifactregistry.googleapis.com \
        containerregistry.googleapis.com \
        run.googleapis.com \
        --project=\"$PROJECT_ID\" || true
    
    print_message "$GREEN" "APIs enabled successfully."
}

# Function to create Artifact Registry repository if it doesn't exist
create_artifact_registry() {
    print_message "$YELLOW" "Checking Artifact Registry repository..."
    
    if ! gcloud artifacts repositories describe "$REPOSITORY" \
        --location="$LOCATION" \
        --project="$PROJECT_ID" &> /dev/null; then
        
        print_message "$YELLOW" "Creating Artifact Registry repository: $REPOSITORY"
        
        gcloud artifacts repositories create "$REPOSITORY" \
            --repository-format=docker \
            --location="$LOCATION" \
            --description="Docker repository for StoryCraft application" \
            --project="$PROJECT_ID"
        
        print_message "$GREEN" "Repository created successfully."
    else
        print_message "$GREEN" "Repository $REPOSITORY already exists."
    fi
}

# Function to configure Docker authentication for Artifact Registry
configure_docker_auth() {
    print_message "$YELLOW" "Configuring Docker authentication for Artifact Registry..."
    
    gcloud auth configure-docker "${LOCATION}-docker.pkg.dev" --quiet
    
    print_message "$GREEN" "Docker authentication configured."
}

# Function to trigger Cloud Build
trigger_build() {
    local build_type=$1
    local with_deploy=$2
    local tag_suffix=""

    if [ "$build_type" == "manual" ]; then
        tag_suffix="manual-$(date +%Y%m%d-%H%M%S)"
    fi

    print_message "$YELLOW" "Starting Cloud Build... ${PROJECT_NUMBER}"
    print_message "$YELLOW" "Repository: ${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_NAME}"

    local substitutions="_LOCATION=${LOCATION},_REPOSITORY=${REPOSITORY},_IMAGE_NAME=${IMAGE_NAME},_SERVICE_NAME=${SERVICE_NAME},_AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID},_AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_SECRET},_PROJECT_NUMBER=${PROJECT_NUMBER},_NEXTAUTH_SECRET=${NEXTAUTH_SECRET}"
    if [ -n "$tag_suffix" ]; then
        substitutions="$substitutions,SHORT_SHA=$tag_suffix"
    fi

    local build_args=(
        "builds"
        "submit"
        "."
        "--config=cloudbuild.yaml"
        "--project=${PROJECT_ID}"
        "--substitutions=${substitutions}"
    )

    gcloud "${build_args[@]}"

    if [ $? -eq 0 ]; then
        print_message "$GREEN" "Build completed successfully!"
        print_message "$GREEN" "Image pushed to: ${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_NAME}"
        if [ "$with_deploy" = true ]; then
            print_message "$GREEN" "Deployment to Cloud Run included in build process."
            local service_url="https://${SERVICE_NAME}-${PROJECT_NUMBER}.${LOCATION}.run.app"
            print_message "$GREEN" "Service URL: $service_url"
        fi
    else
        print_message "$RED" "Build failed. Please check the logs above."
        exit 1
    fi
}

# Function to list built images
list_images() {
    print_message "$YELLOW" "Listing images in repository..."
    
    gcloud artifacts docker images list \
        "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}" \
        --include-tags \
        --limit=10 \
        --format='table(IMAGE,TAGS,CREATE_TIME)' \
        --project="$PROJECT_ID"
}

# Function to deploy to Cloud Run (optional)
deploy_to_cloud_run() {
    print_message "$YELLOW" "Deploying to Cloud Run..."
    
    local image_url="${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_NAME}:latest"
    
    # Deploy with all environment variables
    gcloud run deploy "$SERVICE_NAME" \
        --image="$image_url" \
        --region="$LOCATION" \
        --platform=managed \
        --allow-unauthenticated \
        --service-account="${SERVICE_ACCOUNT_EMAIL}" \
        --memory=2Gi \
        --cpu=2 \
        --port=3000 \
        --max-instances=10 \
        --set-env-vars="PROJECT_ID=${PROJECT_ID}" \
        --set-env-vars="FIRESTORE_DATABASE_ID=storycraft-firestore-db" \
        --set-env-vars="GCS_BUCKET_NAME=storycraft-service-assets-${PROJECT_ID}" \
        --set-env-vars="GCS_VIDEOS_STORAGE_URI=gs://${GCS_BUCKET_NAME}/storycraft/" \
        --set-env-vars="NODE_ENV=production" \
        --set-env-vars="LOCATION=us-central1" \
        --set-env-vars="NEXT_TELEMETRY_DISABLED=1" \
        --set-env-vars="NEXTAUTH_URL=https://${SERVICE_NAME}-${PROJECT_NUMBER}.${LOCATION}.run.app" \
        --set-env-vars="AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_SECRET}" \
        --set-env-vars="AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID}" \
        --set-env-vars="LOG_LEVEL=debug" \
        --set-env-vars="AUTH_TRUST_HOST=${SERVICE_NAME}-${PROJECT_NUMBER}.${LOCATION}.run.app" \
        --set-env-vars="NEXTAUTH_SECRET=${NEXTAUTH_SECRET}" \
        --project="$PROJECT_ID"
    
    if [ $? -eq 0 ]; then
        print_message "$GREEN" "Deployment successful!"
        local service_url=$(gcloud run services describe "$SERVICE_NAME" \
            --region="$LOCATION" \
            --format='value(status.url)' \
            --project="$PROJECT_ID")
        print_message "$GREEN" "Service URL: $service_url"
    else
        print_message "$RED" "Deployment failed."
        exit 1
    fi
}

# Function to show help
show_help() {
    cat << EOF
Usage: $0 [OPTIONS]

Build and push Docker image to Google Artifact Registry using Cloud Build.

OPTIONS:
    -h, --help              Show this help message
    -p, --project PROJECT   Set GCP project ID (default: current gcloud project)
    -l, --location LOCATION Set region/location (default: us-central1)
    -r, --repo REPOSITORY   Set Artifact Registry repository name (default: storycraft-repo)
    -i, --image IMAGE       Set image name (default: storycraft-app)
    -s, --setup             Run initial setup (enable APIs, create repository)
    -b, --build             Trigger Cloud Build
    -d, --deploy            Deploy to Cloud Run after build
    -L, --list              List images in repository
    --build-only            Only build, don't deploy

ENVIRONMENT VARIABLES:
    PROJECT_ID              GCP Project ID
    LOCATION                Region/Location for resources
    REPOSITORY              Artifact Registry repository name
    IMAGE_NAME              Docker image name
    SERVICE_NAME            Cloud Run service name

EXAMPLES:
    # Initial setup
    $0 --setup

    # Build and push image
    $0 --build

    # Build and deploy to Cloud Run
    $0 --build --deploy

    # Build with custom settings
    $0 -p my-project -l us-east1 -r my-repo -i my-app --build

    # List existing images
    $0 --list
EOF
}

# Main script logic
main() {
    local do_setup=false
    local do_build=false
    local do_deploy=false
    local do_list=false
    local build_only=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;; 
            -p|--project)
                PROJECT_ID="$2"
                shift 2
                ;; 
            -l|--location)
                LOCATION="$2"
                shift 2
                ;; 
            -r|--repo)
                REPOSITORY="$2"
                shift 2
                ;; 
            -i|--image)
                IMAGE_NAME="$2"
                shift 2
                ;; 
            -s|--setup)
                do_setup=true
                shift
                ;; 
            -b|--build)
                do_build=true
                shift
                ;; 
            -d|--deploy)
                do_deploy=true
                shift
                ;; 
            -L|--list)
                do_list=true
                shift
                ;; 
            --build-only)
                build_only=true
                shift
                ;; 
            *)
                print_message "$RED" "Unknown option: $1"
                show_help
                exit 1
                ;; 
        esac
done
    
    # Check prerequisites
    check_gcloud
    check_auth
    set_project
    
    print_message "$GREEN" "=== StoryCraft Cloud Build Script ==="
    print_message "$YELLOW" "Project: $PROJECT_ID"
    print_message "$YELLOW" "Location: $LOCATION"
    print_message "$YELLOW" "Repository: $REPOSITORY"
    print_message "$YELLOW" "Image: $IMAGE_NAME"
    echo ""
    
    # Execute requested actions
    if [ "$do_setup" = true ]; then
        enable_apis
        create_artifact_registry
        configure_docker_auth
    fi
    
    if [ "$do_build" = true ]; then
        if [ "$do_setup" != true ]; then
            # Ensure repository exists before building
            create_artifact_registry
            configure_docker_auth
        fi
        
        # Note: When do_deploy is true, Cloud Build will handle deployment
        # The deployment is now integrated into cloudbuild.yaml
        trigger_build "manual" "$do_deploy"
        
        # No need to call deploy_to_cloud_run separately as it's handled in cloudbuild.yaml
    fi
    
    if [ "$do_list" = true ]; then
        list_images
    fi
    
    # If no specific action was requested, show help
    if [ "$do_setup" = false ] && [ "$do_build" = false ] && [ "$do_list" = false ]; then
        print_message "$YELLOW" "No action specified. Use -h for help."
        show_help
    fi
}

# Run main function
main "$@"
